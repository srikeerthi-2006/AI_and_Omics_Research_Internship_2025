print("hi")
data <- 1:10
print("hi")
data <- 1:10
data
data= 1:16
data <- 1:10
data = read.csv(file.choose())
data = read.csv(read.csv(file.choose()))
View(data)
colnames(data)
row.names(data)
View(data)
my_data_selected-column = data[1:5]
my_data_selected-column = data[,1:5]
install.packages("xlsx")
View(data)
print("jesus")
data <- 1:15
BiocManager::install("DESeq2")  # Example: RNA-seq analysis
library(readxl)
library(readxl)
library(readxl)
install.packages("readxl")
install.packages("readxl")
# INSTALL WITH VISUAL CONFIRMATION
install.packages("readxl")  # <- COPY THIS EXACTLY
data<- 1:3
data <-read_xls(file.choose(book1))
# INSTALL WITH VISUAL CONFIRMATION
install.packages("readxl")  # <- COPY THIS EXACTLY
library(readxl)
print("hi")
data <- 1:10
data
data = read.csv(file.choose())
load("C:/Users/eggce/OneDrive/Documents/.RData")
data = read.xlxs(file.choose())
library(openxlsx)
file.choose()
library(readxl)
data <- read_excel(file.choose())   # Choose Book1 when the dialog opens
View(data)
view(data)
View(data)
library(readxl)
data <- read_excel(file.choose())   # Choose Book1 when the dialog opens
data <- readxl::read_excel(file.choose())
view(data)
data <- readxl::read_excel(file.choose())
View(data)
colnames(data)
data <- readxl::read_xlsx(file.choose())
row.name(data)
row.names(data)
rownames(data$gene_id)        #to select any column u like(manually)
rownames(data$Name)        #to select any column u like(manually)
rownames(data$gene_id)        #to select any column u like(manually)
data$gene_id
sample_gene_id = data$gene_id
sample_gene_id
gene = data[,-1]                #to delete a row/column store it and a different variable name[row,column]
View(gene)
damn = data[-1,1:2]
View(gene)
View(damn)
gene_selected_columns = data[,1:3] #to select columns
View(gene_selected_columns)
gene_selected_columns = data[1,1:3] #to select one sample
View(gene_selected_columns)
colnames(data)[1,1]="FR68"
colnames(data)[1]="FR68"
colnames(data)[1]="id_gene"
library(dplyr)
install.packages("dplyr")   # Do this only once
library(dplyr)              # Load it every time you start R
library(dplyr)              # Load it every time you start R
data = data %>% rename_with( #to rename stuffs ahveing the same alphabet with something
~gsub("g","sample",.x)
.cols = contains("g")      #to specify whether its the columns or the rows u wanna change
~gsub("g","sample",.x
data = data %>% rename_with( #to rename stuffs ahveing the same alphabet with something
data = data %>% rename_with( #to rename stuffs ahveing the same alphabet with something
~gsub("g","sample",.x)
.cols = contains("g")      #to specify whether its the columns or the rows u wanna change
data = data %>% rename_with( #to rename stuffs ahveing the same alphabet with something
~gsub("g","sample",.x),
.cols = contains("g")      #to specify whether its the columns or the rows u wanna change
)
View(data)
data = data %>% rename_with( #to rename stuffs ahveing the same alphabet with something
~gsub("g","G",.x),
.cols = contains("g")      #to specify whether its the columns or the rows u wanna change
)
data = data %>% rename_with( #to rename stuffs ahveing the same alphabet with something
~gsub("g","G",.x),
.cols = contains("g")      #to specify whether its the columns or the rows u wanna change
)
)
data = data %>% rename_with( #to rename stuffs ahveing the same alphabet with something
~gsub("g","a",.x),
.cols = contains("g")      #to specify whether its the columns or the rows u wanna change
)
data = data %>% rename_with( #to rename stuffs ahveing the same alphabet with something
~gsub("g","NEW",.x),
.cols = contains("g")      #to specify whether its the columns or the rows u wanna change
)
View(data)
install.packages("dplyr")
raw_data1 <- read.csv("C:/Users/eggce/oneDrive/AI_Omics_Internship_2025/Module_1/AI_and_Omics_Research_Internship_2025/raw_data/DEGs_Data_1.csv")
View(raw_data1)
View(raw_data1)
raw_data2 <- read.csv("C:/Users/eggce/oneDrive/AI_Omics_Internship_2025/Module_1/AI_and_Omics_Research_Internship_2025/raw_data/DEGs_Data_2.csv")
View(raw_data2)
View(raw_data2)
na_count_before <- sum(is.na(gene_data$padj))
na_count_before <- sum(is.na(gene_data$padj))
# 3. Check for missing values (NA) in the 'padj' column
na_count_before <- sum(is.na(raw_data$padj))
# 3. Check for missing values (NA) in the 'padj' column
na_count_before <- sum(is.na(raw_data1$padj))
na_count_before <- sum(is.na(raw_data2$padj))
cat("Number of missing 'padj' values found:", na_count_before, "\n")
gene_data$padj[is.na(raw_data1$padj)] <- 1
raw_data1$padj[is.na(raw_data1$padj)] <- 1
cat("Missing 'padj' values have been replaced with 1.\n")
raw_data2$padj[is.na(raw_data2$padj)] <- 1
cat("Missing 'padj' values have been replaced with 1.\n")
setwd("C:/Users/eggce/OneDrive/AI_Omics_Internship_2025/Module_1/AI_and_Omics_Research_Internship_2025")
# Define folder names
input_dir <- "raw_data"   # Folder where your DEGs files are
output_dir <- "Results"    # Folder where results will be saved
if (!dir.exists(output_dir)) {
dir.create(output_dir)
}
# For raw_data1
na_count_1 <- sum(is.na(raw_data1$padj))
cat("Missing 'padj' values in raw_data1:", na_count_1, "\n")
# For raw_data2
na_count_2 <- sum(is.na(raw_data2$padj))
cat("Missing 'padj' values in raw_data2:", na_count_2, "\n")
raw_data1$status <- mapply(classify_gene, raw_data1$logFC, raw_data1$padj)
classify_gene <- function(logFC, padj) {
if (logFC > 1 & padj < 0.05) {
return("Upregulated")
} else if (logFC < -1 & padj < 0.05) {
return("Downregulated")
} else {
return("Not_Significant")
}
}
raw_data1$status <- mapply(classify_gene, raw_data1$logFC, raw_data1$padj)
raw_data2$status <- mapply(classify_gene, raw_data2$logFC, raw_data2$padj)
cat("Gene classification complete for both datasets.\n")
cat("Summary for DEGs_data_1.csv:\n")
print(table(raw_data1$status))
cat("\nSummary for DEGs_data_2.csv:\n")
print(table(raw_data2$status))
write.csv(raw_data1, file.path(output_dir, "Processed_DEGs_data_1.csv"), row.names = FALSE)
write.csv(raw_data2, file.path(output_dir, "Processed_DEGs_data_2.csv"), row.names = FALSE)
cat("Processed CSV files saved to Results folder.\n")
save(raw_data1, raw_data2, classify_gene, file = "yourname_Class_2_Assignment.RData")
cat("RData file 'yourname_Class_2_Assignment.RData' created.\n")
load("C:/Users/eggce/OneDrive/AI_Omics_Internship_2025/Module_1/AI_and_Omics_Research_Internship_2025/Srikeerthi_Class_2_Assignment.RData.RData")
save.image("C:/Users/eggce/OneDrive/AI_Omics_Internship_2025/Module_1/AI_and_Omics_Research_Internship_2025/assignment2_clean_data.RData")
save.image("C:/Users/eggce/OneDrive/AI_Omics_Internship_2025/Module_1/AI_and_Omics_Research_Internship_2025/assignment2_clean_data2.RData")
