gene <- "TP53"
#to retreive value in console
gene
print(gene)
expression_levels <- c("2.3,4.6,3.6,7.2,4.7")
gene <- TP53
expression_levels <- c(2.3,4.6,3.6,7.2,4.7)
raw_data <- read.csv(file.choose())
View(raw_data)
#rules
#variable name must start with a capital letter(no number and shit)
gene1 <- 25
#no spaces allowed in a variable name
sample id <- "s01"
#no spaces allowed in a variable name
sample_id <- "s01"
glucose_level <- 110
Glucose_level <- 110
glucose_level <- 110
glucose_level <- c(110,90,120)
raw_data$patient_id <- NULL #this code will remove patient_id column from raw_data
View(raw_data)
library(readr)
patient_info <- read_csv("C:/Users/eggce/OneDrive/AI_Omics_Internship_2025/Module_1/AI_and_Omics_Research_Internship_2025/raw_data/patient_info.csv")
View(patient_info)
clean_data <- data[,-1]
clean_data <- data(,-1)
clean_data <- data[,-1]
library(readr)
patient_info_clean <- read_csv("C:/Users/eggce/OneDrive/AI_Omics_Internship_2025/Module_1/AI_and_Omics_Research_Internship_2025/clean_data/patient_info_clean.csv")
View(patient_info_clean)
clean_data <- data[,-1] #this code deleted the patient_id column and assigned a new variable
patient_info_clean <- data[,-1] #this code deleted the patient_id column and assigned a new variable
View(patient_info)
# Example: Store a gene name (string data requires quotes)
gene <- "TP53"  # Stores the gene name TP53
# Retrieve values:
gene            # Directly type variable name
print(gene)     # Or use print() function
# Store numeric values (vector)
expression_levels <- c(2.3, 4.6, 3.6, 7.2, 4.7)
# Import CSV file
# raw_data <- read.csv("patient_info.csv")  # Uncomment to use
# For interactive file selection:
raw_data <- read.csv(file.choose())
#### Variable Naming Rules ####
gene1 <- 25       # Valid (starts with letter)
sample_id <- "s01" # Valid (underscore separator)
# 1gene <- 25      # Invalid (starts with number)
# sample id <- "s1" # Invalid (contains space)
# Case sensitivity
Glucose_level <- 110  # Different from glucose_level
# Overwriting variables (no warning)
glucose_level <- c(110, 90, 120)  # Replaces previous value
# Case sensitivity
Glucose_level <- 110  # Different from glucose_level
# Overwriting variables (no warning)
glucose_level <- c(110, 90, 120)  # Replaces previous value
help("reserved")  # View complete list
raw_data <- read.csv(file.choose())
gene1 <- 25       # Valid (starts with letter)
sample_id <- "s01" # Valid (underscore separator)
help("reserved")  # View complete list
sorted_age <- sort(raw_data$age, decreasing = TRUE)
gene_expression <- 30
if (gene_expression > 50) {
print("High expression")
} else {
print("Low expression")
}
View(raw_data)
clean_data <- raw_data
for (i in 1:ncol(clean_data)) {
if (is.character(clean_data[[i]])) {
clean_data[[i]] <- as.factor(clean_data[[i]])
}
}
cholesterol <- 230
if (cholesterol > 240) {
print("High Cholesterol")
}
Systolic_bp <- 130
if (Systolic_bp < 120) {
print("Blood Pressure is normal")
} else {
print("Blood Pressure is high")
}
# For patient_info.csv:
factor_cols <- c("gender", "smoking_status")  # Example columns
for (col in factor_cols) {
clean_data[[col]] <- as.factor(clean_data[[col]])
}
binary_cols <- c("smoking_status")
for (col in binary_cols) {
clean_data[[col]] <- ifelse(clean_data[[col]] == "Yes", 1, 0)
}
str(raw_data)     # Original structure
str(clean_data)   # Modified structure
View(clean_data)
View(clean_data)
raw_data <- read.csv(file.choose())
sorted_age <- sort(raw_data$age, decreasing = TRUE)
# Load your data first (if not already loaded)
raw_data <- read.csv(file.choose())  # Select your CSV file
1. Sorting Data (Fixed typo in variable name)
sorted_age <- sort(raw_data$age, decreasing = TRUE)  # Corrected "sortcraw_datasage" to "raw_data$age"
sorted_age
View(raw_data)
raw_data <- read.csv(file.choose())
clean_data <- raw_data
for (i in 1:ncol(clean_data)) {
if (is.character(clean_data[[i]])) {
clean_data[[i]] <- as.factor(clean_data[[i]])
}
}
View(clean_data)
str(raw_data)     # Original (character columns)
str(clean_data)
sorted_age <- sort(raw_data$age, decreasing = TRUE)  # Corrected "sortcraw_datasage" to "raw_data$age"
sorted_age
View(clean_data)
gene <- "TP53"                     # Character
expression <- c(2.3, 4.6, 3.6)    # Numeric vector
patient_data <- read.csv("patient_info.csv")  # Use file.choose() if needed
patient_data <- read.csv("patient_info.csv")
raw_data <- read.csv(file.choose())
patient_data <- read.csv("patient_info.csv")  # Use file.choose() if needed
clean_data <- patient_data
clean_data <- raw_data
for (i in 1:ncol(clean_data)) {
if (is.character(clean_data[[i]])) {
clean_data[[i]] <- as.factor(clean_data[[i]])
}
}
View(clean_data)
View(clean_data)
sorted_age <- sort(clean_data$age, decreasing = TRUE)
gene_exp <- 30
if (gene_exp > 50) {
print("High expression")
} else {
print("Low expression")  # Will print this
}
glucose <- c(90, 110, 150)
sorted_glucose <- sort(glucose, decreasing = ______)
glucose <- c(90, 110, 150)
sorted_glucose <- sort(glucose, decreasing= 90,110,150)
patient_data <- read.csv("patient_info.csv")  # Or use file.choose()
patient_data <- read.csv("patient_info.csv")
raw_data <- read.csv("patient_info.csv")
raw_data <- read.csv(file.choose())
glucose <- c(90, 110, 150)
sorted_glucose <- sort(glucose, decreasing = TRUE)  # Fill TRUE/FALSE
print(sorted_glucose)
View(raw_data)
avg_bmi <- mean(patient_data$bmi)
avg_bmi <- mean(raw_data$bmi)
if (avg_bmi > 25) {  # Complete the condition
print("Overweight population")
} else {
print("Normal weight population")
}
patient_data$gender <- as.factor(patient_data$gender)  # Fill the function
raw_data$gender <- as.factor(raw_data$gender)  # Fill the function
class(raw_data$gender)
View(raw_data)
# Reload to reset (run this first)
raw_data <- read.csv("patient_info.csv")  # Or use file.choose()
raw_data <- read.csv("patient_info.csv")
library(readr)
patient_info_csv <- read_csv("C:/Users/eggce/OneDrive/AI_Omics_Internship_2025/class_1c/raw_data/patient_info.csv.csv")
View(patient_info_csv)
rm(list = ls())
raw_data <- read.csv(file.choose())
head(raw_data)  # Should show first 6 rows
str(raw_data)   # Check column structure
View(raw_data)  # Spreadsheet view - must use object name, not filename
clean_data <- raw_data
clean_data$gender <- as.factor(clean_data$gender)
clean_data$diagnosis <- as.factor(clean_data$diagnosis)
clean_data$smoker <- as.factor(clean_data$smoker)
View(clean_data)
write.csv(clean_data, "clean_patient_data.csv", row.names = FALSE)
cholesterol <- 230
if (cholesterol > 240) {
print("High Cholesterol")
}
#### 2. Blood Pressure Status ####
Systolic_bp <- 130
if (Systolic_bp < 120) {
print("Blood Pressure is normal")
} else {
print("Blood Pressure is high")
}
#### 3. Automated Data Conversion ####
# For patient_info.csv:
factor_cols <- c("gender", "smoking_status")  # Example columns
for (col in factor_cols) {
clean_data[[col]] <- as.factor(clean_data[[col]])
}
View(raw_data)
raw_data <- read.csv(file.choose())
#### Variable Naming Rules ####
gene1 <- 25       # Valid (starts with letter)
sample_id <- "s01" # Valid (underscore separator)
# 1gene <- 25      # Invalid (starts with number)
# sample id <- "s1" # Invalid (contains space)
Glucose_level <- 110  # Different from glucose_level
glucose_level <- c(110, 90, 120)  # Replaces previous value
help("reserved")
sorted_age <- sort(raw_data$age, decreasing = TRUE)
for (col in names(patient_data)) {
print(paste(col, ":", class(patient_data[[col]])))  # Fill the function
}
for (col in names(patient_info_csv)) {
print(paste(col, ":", class(patient_data[[col]])))  # Fill the function
}
View(clean_data)
View(clean_data)
height <- c(1.75,1.76,1.82,1.65)
c(68.78.85,75) >- weight
# -> (same;but leftward)
c(68,78,85,75) >- weight
c(68,78,85,75) -> weight
smoking_status = c("YES","NO","NO","YES")
BMI <- weight/(height^2)
BMI > 25
BMI < 18.5
# Start the for-loop to process each file
for (file_name in files_to_process) {
# Print a message to the console to track progress
cat("\n", "="^50, "\n")
cat("Processing file:", file_name, "\n")
cat("="^50, "\n\n")
# 1. Create the full path to the input file and import it
input_file_path <- file.path(input_dir, file_name)
gene_data <- read.csv(input_file_path, header = TRUE)
# 2. Inspect the imported data
cat("Dataset dimensions (rows, columns):", dim(gene_data), "\n")
cat("First few rows:\n")
print(head(gene_data))
for (file_name in files_to_process) {
# Print a message to the console to track progress
cat("\n", "="^50, "\n")
cat("Processing file:", file_name, "\n")
cat("="^50, "\n\n")
# 1. Create the full path to the input file and import it
input_file_path <- file.path(input_dir, file_name)
gene_data <- read.csv(input_file_path, header = TRUE)
# 2. Inspect the imported data
cat("Dataset dimensions (rows, columns):", dim(gene_data), "\n")
cat("First few rows:\n")
print(head(gene_data))
for (file_name in files_to_process) {
cat("\n", "="^50, "\n")
cat("Processing file:", file_name, "\n")
cat("="^50, "\n\n")
input_file_path <- file.path(input_dir, file_name)
gene_data <- read.csv(input_file_path, header = TRUE)
cat("Dataset dimensions (rows, columns):", dim(gene_data), "\n")
cat("First few rows:\n")
print(head(gene_data))
# Start the for-loop to process each file
for (file_name in files_to_process) {
# Print a message to the console to track progress
cat("\n", "="^50, "\n")
cat("Processing file:", file_name, "\n")
cat("="^50, "\n\n")
# 1. Create the full path to the input file and import it
input_file_path <- file.path(input_dir, file_name) # FIXED: file.path
gene_data <- read.csv(input_file_path, header = TRUE)
# 2. Inspect the imported data
cat("Dataset dimensions (rows, columns):", dim(gene_data), "\n")
cat("First few rows:\n")
print(head(gene_data))
} # <-- Closing brace for the loop
for (file_name in files_to_process) {
# Print a message to the console to track progress
cat("\n", "="^50, "\n")
cat("Processing file:", file_name, "\n")
cat("="^50, "\n\n")
input_file_path <- file.path(input_dir, file_name) # FIXED: file.path
gene_data <- read.csv(input_file_path, header = TRUE)
cat("Dataset dimensions (rows, columns):", dim(gene_data), "\n")
cat("First few rows:\n")
print(head(gene_data))
print(input.dir)
print(files_to_process)
