load("C:/Users/eggce/OneDrive/AI_Omics_Internship_2025/GSE285348_RAW.tar")
if (!requireNamespace("BiocManager",quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(c("GEOquery","affy","limma","arrayQualityMetrics,
AnnotationDbi","hgu33plus2.db"))
BiocManager::install(c("GEOquery","affy","limma","arrayQualityMetrics",
"AnnotationDbi","hgu33plus2.db"))
BiocManager::install(c("GEOquery","affy","limma","arrayQualityMetrics",
"AnnotationDbi","hgu133plus2.db"))
install.packages("dplyr")
library(GEOquery)   #download GEO datasets (series,matrix,raw CEL files)
library(affy)       #pre-processing of affymetrix microarray data
library(arrayQualityMetrics)    #Quality of microarray data
library(limma)
library(AnnotationDbi)          #interface for annotation databases
library(hgu133plus2.db)         #annotation for affymetrix human genome u133 plus 2.0 array
library(dplyr)                  #data manipulation
gse_data <- getGEO("GSE285348",GSEMatrix = TRUE)
View(gse_data)
expression_data <- exprs(gse_data$GSE285348_series_matrix.txt.gz)
View(expression_data)
feature_data <- fData(gse_data$GSE285348_series_matrix.txt.gz)
View(feature_data)
phenotype_data <- pData(gse_data$GSE285348_series_matrix.txt.gz)
View(phenotype_data)
sum(is.na(phenotype_data$source_name_ch1))
getGEOSuppFiles("GSE285348",baseDir = "Raw_Data",makeDirectory = TRUE)
getGEOSuppFiles("GSE285348", baseDir = "Raw_Data", makeDirectory = TRUE)
untar("Raw_Data/GSE285348_RAW.tar",exdir = "Raw_Data/CEL_Files")
untar("Raw_Data/GSE285348_RAW.tar",exdir = "Raw_Data/CEL_Files")
untar("Raw_Data/GSE285348_RAW.tar",exdir = "Raw_Data/CEL_Files")
untar("Raw_Data/GSE285348/GSE285348_RAW.tar", exdir = "Raw_Data/CEL_Files")
list.files("Raw_Data/", recursive = TRUE)
untar("Raw_data/GSE285348_RAW.tar", exdir =  "Raw_Data/CEL_Files")
untar("Raw_Data/GSE285348_RAW.tar", exdir =  "Raw_Data/CEL_Files")
getGEOSuppFiles("GSE285348", baseDir = "Raw_Data", makeDirectory = TRUE)
getGEOSuppFiles("GSE285348", baseDir = "Raw_Data", makeDirectory = TRUE)
library(GEOquery)
getGEOSuppFiles("GSE285348", baseDir = "Raw_Data", makeDirectory = TRUE)
list.files(recursive = TRUE)
dir.create("Raw_Data/CEL_files", recursive = TRUE, showWarnings = FALSE)
list.files(pattern = "GSE285348", recursive = TRUE)
file.rename("GSE285348_RAW.tar", "Raw_Data/GSE285348_RAW.tar")
untar("Raw_Data/GSE285348_RAW.tar", exdir = "Raw_Data/CEL_files")
unzip("Raw_Data/E-GEOD-2567.zip", exDir = "Raw_Data/E_GEOD2567")
raw_data <- ReadAffy(celfile.path = "Raw_Data/CEL_Files")
raw_data <- ReadAffy(celfile.path = "Raw_Data/CEL_files")
if (!requireNamespace("BiocManager",quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(c("GEOquery","affy","limma","arrayQualityMetrics",
"AnnotationDbi","hgu133plus2.db"))
install.packages("dplyr")
library(GEOquery)   #download GEO datasets (series,matrix,raw CEL files)
library(affy)       #pre-processing of affymetrix microarray data
library(arrayQualityMetrics)    #Quality of microarray data
library(limma)
library(AnnotationDbi)          #interface for annotation databases
library(hgu133plus2.db)         #annotation for affymetrix human genome u133 plus 2.0 array
library(dplyr)
gse_data <- getGEO("GSE285348",GSEMatrix = TRUE)
expression_data <- exprs(gse_data$GSE285348_series_matrix.txt.gz)
expression_data <- exprs(gse_data$GSE285348_series_matrix.txt.gz)
feature_data <- fData(gse_data$GSE285348_series_matrix.txt.gz)
phenotype_data <- pData(gse_data$GSE285348_series_matrix.txt.gz)
gse_data <- getGEO("GSE285348",GSEMatrix = TRUE)
raw_data <- ReadAffy(celfile.path = "Raw_Data/CEL_files")
raw_data
View(raw_data)
View(expression_data)
View(feature_data)
View(gse_data)
View(phenotype_data)
View(phenotype_data)
View(raw_data)
arrayQualityMetrics(expressionset = raw_data
outdir = "Results/QC_Raw_Data",
arrayQualityMetrics(expressionset = raw_data,
outdir = "Results/QC_Raw_Data",
force = TRUE,
do.logtransform = TRUE)
head(raw_data)
BiocManager::install("clarioms_human_cdf")
BiocManager::install("clarioms_human_transcriptcluster.db")
BiocManager::install("clarioms_human_probeset.db")
BiocManager::available(pattern = "clariom")
BiocManager::install(c("pd.clarion.s.human", "clarionshumantranscriptcluster.db"))
install.packages("installr")
library(installr)
updateR()
BiocManager::install(c("pd.clarion.s.human", "clarionshumantranscriptcluster.db"))
BiocManager::install("pd.clarion.s.human.1.1.st.v1")
BiocManager::install("clarioms.human.1.1.st.v1.transcriptcluster.db")
arrayQualityMetrics(expressionset = raw_data,
outdir = "Results/QC_Raw_Data",
force = TRUE,
do.logtransform = TRUE)
BiocManager::install("clariomshumancdf")
library(affy)
MAplot(raw_data[,1:2], main = "MA Plot - Sample 1 vs Sample 2")
deg <- AffyRNAdeg(raw_data)
if (!requireNamespace("oligo", quietly = TRUE)) {
BiocManager::install("oligo")
}
library(oligo)
celFiles <- list.celfiles("path/to/CEL/files", full.names = TRUE)
rawData <- read.celfiles(celFiles)
library(oligo)
celFiles <- list.celfiles("path/to/CEL/files", full.names = TRUE)
sapply(celFiles, function(x) {
tryCatch({
oligo::getChipType(x)
}, error = function(e) NA)
})
library(oligo)
celFiles <- list.celfiles("path/to/CEL/files", full.names = TRUE)
sapply(celFiles, function(x) {
tryCatch({
oligo::getChipType(x)
}, error = function(e) NA)
})
library(oligo)
celFiles <- list.celfiles("path/to/CEL/files", full.names = TRUE)
sapply(celFiles, function(x) {
tryCatch({
oligo::getChipType(x)
}, error = function(e) NA)
})
library(oligo)
celFiles <- list.celfiles("path/to/CEL/files", full.names = TRUE)
sapply(celFiles, function(x) {
tryCatch({
oligo::getChipType(x)
}, error = function(e) NA)
})
library(oligo)
celFiles <- list.celfiles("path/to/CEL/files", full.names = TRUE)
sapply(celFiles, function(x) {
tryCatch({
oligo::getChipType(x)
}, error = function(e) NA)
})
processed_data <- as.data.frame(exprs(normalized_data))
processed_data <- as.data.frame(exprs(normalized_data))
normalized_data <- justRMA(celfile.path = "Raw_Data/CEL_Files")
normalized_data <- justRMA(celfile.path = "Raw_Data/CEL_Files")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(c("GEOquery","affy","dplyr"))
library(GEOquery)             # Download GEO datasets
library(affy)                 # Pre-processing of Affymetrix microarray data
library(dplyr)
gse_data <- getGEO("GSE285348", GSEMatrix = TRUE)
expression_data <- exprs(gse_data[[1]])
feature_data <- fData(gse_data[[1]])
phenotype_data <- pData(gse_data[[1]])
sum(is.na(phenotype_data$source_name_ch1))
processed_data <- as.data.frame(expression_data)
boxplot(expression_data,
main = "GSE285348 - Expression Distribution",
col = "lightblue",
las = 2)
hist(expression_data,
main = "GSE285348 - Density Plot",
xlab = "Expression Values")
print("=== QC METRICS ===")
print(paste("Number of samples:", ncol(expression_data)))
print(paste("Number of probes:", nrow(expression_data)))
print(paste("Data dimensions:", dim(expression_data)))
View(feature_data)
View(gse_data)
View(phenotype_data)
View(processed_data)
sample_means <- colMeans(expression_data)
print("Sample mean intensities:")
print(sample_means)
row_median <- apply(expression_data, 1, median)
hist(row_median,
breaks = 100,
freq = FALSE,
main = "GSE285348 - Median Intensity Distribution",
xlab = "Median Intensity")
threshold <- quantile(row_median, 0.2)  # Remove bottom 20% low intensity probes
abline(v = threshold, col = "red", lwd = 2)
legend("topright", legend = paste("Threshold =", round(threshold, 2)), col = "red", lwd = 2)
indx <- row_median > threshold
filtered_data <- expression_data[indx, ]
print("=== FILTERING RESULTS ===")
print(paste("Original number of probes:", nrow(expression_data)))
print(paste("Probes after filtering:", nrow(filtered_data)))
print(paste("Probes removed:", nrow(expression_data) - nrow(filtered_data)))
colnames(filtered_data) <- rownames(phenotype_data)
processed_data <- as.data.frame(filtered_data)
print("=== PHENOTYPE DATA ===")
print(head(phenotype_data$source_name_ch1))
print(unique(phenotype_data$source_name_ch1))
groups <- factor(phenotype_data$source_name_ch1)
print("Experimental groups:")
print(table(groups))
print(levels(groups))
print(colnames(phenotype_data))
print(unique(phenotype_data$characteristics_ch1))
print(unique(phenotype_data$characteristics_ch1.1))
print(unique(phenotype_data$characteristics_ch1.2))
print(unique(phenotype_data$characteristics_ch1.1))
print(unique(phenotype_data$characteristics_ch1.2))
print(unique(phenotype_data$characteristics_ch1))
print(unique(phenotype_data$characteristics_ch1.1))
print(unique(phenotype_data$description))
print(unique(phenotype_data$title))
groups <- factor(phenotype_data$description,
levels = c("not PWS,not obese", "not PWS,obese", "PWS,not obese", "PWS,obese"),
labels = c("control_NW", "control_obese", "PWS_NW", "PWS_obese"))
print("Experimental groups:")
print(table(groups))
write.csv(processed_data, "GSE285348_filtered_expression.csv")
phenotype_data$experimental_group <- groups
write.csv(phenotype_data, "GSE285348_phenotype_data.csv")
print("=== PROCESSING COMPLETE ===")
print(paste("Final dataset:", nrow(processed_data), "probes x", ncol(processed_data), "samples"))
